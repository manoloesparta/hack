// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
    Mux16(a=x, sel=zx, out=x1);
    Not16(in=x1, out=notx1);
    Mux16(a=x1, b=notx1, sel=nx, out=x2);

    Mux16(a=y, sel=zy, out=y1);
    Not16(in=y1, out=noty1);
    Mux16(a=y1, b=noty1, sel=ny, out=y2);

    Add16(a=x2, b=y2, out=xaddy);
    And16(a=x2, b=y2, out=xandy);
    Mux16(a=xandy, b=xaddy, sel=f, out=res);

    Not16(in=res, out=notres);
    Mux16(a=res, b=notres, sel=no, out=out, out[15]=sign, out[0..7]=first, out[8..15]=second);

    Or8Way(in=first, out=idk);
    Or8Way(in=second, out=idk2);
    Or(a=idk, b=idk2, out=idkres);
    Not(in=idkres, out=zr);

    And(a=sign, b=true, out=ng);
}